#! /usr/bin/env python

#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from __future__ import print_function
import sys
import argparse
from struct import pack_into
from tftf import Tftf, TFTF_SECTION_TYPE_SIGNATURE
import M2Crypto
from signature_block import SignatureBlock, TFTF_SIGNATURE_LEN_FIXED_PART, \
    TFTF_SIGNATURE_OFF_TYPE, TFTF_SIGNATURE_OFF_KEY_NAME
from signature_common import get_key_filename, get_signature_algorithm, \
    get_key_type, get_format_type, format_key_name, \
    TFTF_SIGNATURE_ALGORITHM_RSA_2048_SHA_256, SIGNATURE_COMMON_ARGUMENTS
from util import error, print_to_error
from getpass import getpass
import os


# M2Crypto.RSA.load_key() gets its passphrase only via the get_passphrase()
# callback. (The API for get_passphrase is under the control of the M2Crypto
# library, and is intended to prompt the user for the passphrase, optionally
# prompting them a second time to verify the passphrase.) During real testing,
# it was found that the total number of prompts for the same passphrase was
# onerous, sign-tftf was modified to allow the passphrase to be entered once
# and used multiple times.
#
# One can enter the passphrase to sign-tftf via the command line, stdin or
# a prompt. Because of the passphrase re-use and the multiple vectors for
# obtaining it, we store it in a global, which get_passphrase returns.
passphrase = None


# Program return values
PROGRAM_SUCCESS = 0
PROGRAM_WARNINGS = 1
PROGRAM_ERRORS = 2


def get_hash_from_signature_algorithm(tftf_signature_algorithm):
    # Obtain the hash type from the signature type.
    #
    # Returns a string, suitable for Crypto.RSA.RSA.sign, identifying
    # the hash algorithm to use. This makes the hash usage consistent
    # with the supplied signature type.

    if tftf_signature_algorithm == TFTF_SIGNATURE_ALGORITHM_RSA_2048_SHA_256:
        return "sha256"
    else:
        return None


def get_signable_blob(tftf):
    # Assemble the binary blob for signing.
    #
    # This consists of the first part of the TFTF header (up to the first
    # signature descriptor), and the corresponding parts of the tftf data

    index = tftf.find_first_section(TFTF_SECTION_TYPE_SIGNATURE)
    return bytes(tftf.get_header_up_to_section(index) +
                 tftf.get_section_data_up_to_section(index))


def validate_args(args):
    # Sanity-check the command line args and return a "valid" flag

    if len(args.files) == 0:
        error("Missing the TFTF file to sign")
        return False
    if len(args.files) > 1:
        error("Too many TFTF files to sign")
        return False

    if not get_format_type(args.format):
        error("Unknown --format: '{0:s}' - must be standard | es3".
              format(args.type))
        return False

    return True


def process_passin(passin):
    """ Handle the various --passin options

    --passin pass:Password - Use the specified Password as a password
    --passin stdin - Read the password from standard input
    --passin prompt - Prompt for password (default behaviour)

    The password is stored in the global "passphrase" for the use by
    get_passphrase. Unknown passin options result in raising a
    ValueError.

    Note that if called with "pass:" or "stdin", we will only set the
    passphrase once. This allows us to be called multiple times as part
    of a get-passphrase/load-key retry mechanism for the "prompt" option
    only.
    """
    global passphrase
    if passin.startswith("pass:"):
        if not passphrase:
            passphrase = passin[5:]
    elif passin == "stdin":
        if not passphrase:
            passphrase = sys.stdin.readline().rstrip()
    elif passin == "prompt":
        while True:
            try:
                passphrase = getpass("Enter passphrase: ")
                break
            except KeyboardInterrupt:
                raise IOError("Cancelled")
    else:
        raise ValueError("Unknown --passin option: {0:s}".format(passin))


def get_passphrase(verify, prompt1='Enter passphrase:',
                   prompt2='Verify passphrase:'):
    """ Provide the passphrase to the M2Crypto routine

    See: http://nullege.com/codes/search/util.passphrase_callback for
    prototype. API defined by M2Crypto library.

    While it may seem excessive to use a function to return a global variable,
    the get_passphrase callback is the only means of supplying the passphrase
    to M2Crypto.RSA.load_key.

    Returns the passphrase obtained by process_passin.
    """
    global passphrase
    return passphrase


def get_key(key_filename, passin, no_retry):
    """ Read the key, given the private key pathanme and --passin mode

    Returns a valid key if successful, raises various exceptions otherwise
    """
    # Read the key
    if not key_filename or not os.path.isfile(key_filename):
        raise ValueError("Can't find key file '{0:s}'".format(key_filename))
    else:
        # If we're getting the passphrase interatively, repeatedly try to
        # get the passphrase and the key until successful. It we're not
        # getting the passphrase interactively, just make one attempt.
        while True:
            # Obtain the passphrase for the key
            try:
                process_passin(passin)
            except IOError as e:
                print_to_error(e)
                raise
            except ValueError as e:
                raise ValueError("Can't load passphrase ({0})".format(e))

            # Try to load the key, using the passphrase. If that fails and
            # we got the passphrase interactively, try again until they get
            # it right (or ^C out). NB the --retry flag causes us to skip
            # retrying
            try:
                return M2Crypto.RSA.load_key(key_filename, get_passphrase)
            except M2Crypto.RSA.RSAError as e:
                if (passin == "prompt") and no_retry:
                    raise ValueError("Invalid passphrase for {0}".
                                     format(os.path.basename(key_filename)))
                else:
                    error("Invalid passphrase for {0}".
                          format(os.path.basename(key_filename)))
            except:
                raise IOError("Can't load key {0}".
                              format(os.path.basename(key_filename)))
    # We should never get here
    raise ValueError("Unknown problem in get_key")


def main():
    """Mainline"""

    global tftf_signature_algorithms
    parser = argparse.ArgumentParser()

    # Common args (--type, --suffix, --signature-algorithm, --format):
    for args, kwargs in SIGNATURE_COMMON_ARGUMENTS:
        parser.add_argument(*args, **kwargs)

    # App-specific args:
    parser.add_argument("--key",
                        required=True,
                        help="The name of input PEM file")

    parser.add_argument("--verbose", "-v",
                        action='store_true',
                        help="Display the signed TFTF header when done")

    parser.add_argument("--passin",
                        default="prompt",
                        help="Key file passphrase (stdin | (prompt) | "
                             "pass:<passphrase>)")

    parser.add_argument("--retry",
                        action='store_true',
                        help="Fail if '--passin prompt' passphrase is invalid")

    parser.add_argument("--check",
                        action='store_true',
                        help="Check that the parameters are sound, the TFTF "
                             "exists and the passphrase is correct, but do "
                             "not modify TFTF")

    # List of files to be signed with the one key
    parser.add_argument("files",
                        metavar='N',
                        nargs='+',
                        help="TFTF file to sign")

    args = parser.parse_args()

    # Sanity-check the arguments
    if not validate_args(args):
        error("Invalid args")
        sys.exit(PROGRAM_ERRORS)

    # Convert the key and signature type strings into tokens
    signature_algorithm = get_signature_algorithm(args.signature_algorithm)
    key_type = get_key_type(args.type)
    key_format = get_format_type(args.format)
    hash_algorithm = get_hash_from_signature_algorithm(key_type)
    if not hash_algorithm:
        error("Unknown hash algorithm")
        sys.exit(PROGRAM_ERRORS)

    # Read the key
    key_filename = get_key_filename(args.key, True)
    if not key_filename:
        error("Can't find key file '{0:s}'".format(args.key))
        sys.exit(PROGRAM_ERRORS)

    # Create an initial signature block, sized to the fixed portion, with
    # as much initialized as possible.  We'll use this as the base image
    # for each of the specified TFTF files, where we'll append the signature
    # proper, set the length and append the section to the TFTF file.
    base_signature_block = bytearray(TFTF_SIGNATURE_LEN_FIXED_PART)

    # Fill in the signature block type
    pack_into("<L", base_signature_block, TFTF_SIGNATURE_OFF_TYPE,
              signature_algorithm)

    # Derive a key name from the key file and add it to the signature block
    key_name = format_key_name(key_format, os.path.basename(key_filename), key_type,
                               signature_algorithm, args.suffix)
    pack_into("<96s", base_signature_block, TFTF_SIGNATURE_OFF_KEY_NAME,
              key_name)

    # Walk the list of TFTF files
    for f in args.files:
        # Discard any prior TFTF and load the next one
        tftf = None
        signature_block = base_signature_block
        tftf = Tftf(0, f)

        # Process each TFTF, unless "--check" was specified
        if not args.check:
            # Extract the signable blob from the TFTF and sign it
            signable_blob = get_signable_blob(tftf)
            MsgDigest = M2Crypto.EVP.MessageDigest(hash_algorithm)
            MsgDigest.update(signable_blob)
            key = get_key(args.key, args.passin, args.retry)
            signature = key.sign(MsgDigest.digest(), hash_algorithm)

            # Append the signature block to the TFTF
            signature_block = SignatureBlock(None, signature_algorithm, key_name,
                                             signature)
            if not tftf.add_section(TFTF_SECTION_TYPE_SIGNATURE,  # type
                                    0,                            # class
                                    0,                            # id
                                    signature_block.pack()):      # data
                sys.exit(PROGRAM_ERRORS)

            tftf.post_process()

            # Optionally display the header info
            if args.verbose:
                tftf.pack()
                tftf.display(f)
                tftf.display_data(f)

            # Write the TFTF file (i.e., header and section files)
            if not tftf.write(f):
                sys.exit(PROGRAM_ERRORS)

    print("Done")


## Launch main
#
if __name__ == '__main__':
    main()
